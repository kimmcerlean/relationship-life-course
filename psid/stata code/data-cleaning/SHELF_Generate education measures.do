********************************************************************************
*** PSID-SHELF DATA PROJECT                                           **********
*** Construction - 03 Generate education measures                     **********
*** Last update: 2023.10.10, DD                                       **********
********************************************************************************

*-------------------------------------------------------------------------*
* File preamble
*-------------------------------------------------------------------------*

/*
* This file is used to construct the PSID's Social, Health, and Economic 
* Longitudinal File (PSID-SHELF). The "03 Generate education measures" file 
* collects educational information, related to: years of education; educational 
* milestones; educational setting; and level of education.

* The following variables are generated by this file:

        * YEARS OF EDUCATION
        * (1)  eduyear          Ind's years of education
        * (2)  eduyearmax       Ind's years of education, max ever response
        * (3)  eduyearrp        RP's years of education
        * (4)  eduyearsp        SP's years of education
        * (5)  eduyearrc        RP/SP's joint years of education
        * (6)  eduyearmaxrp     RP's years of education, max ever response
        * (7)  eduyearmaxsp     SP's years of education, max ever response
        * (8)  eduyearmaxrc     RP/SP's joint years of education, max ever response

        * EDUCATIONAL MILESTONES
        * (9)  educomp          Ind's highest grade completed
        * (10) eduhsgrad        Ind graduated high school?
        * (11) eduanycol        Ind entered college?
        * (12) edudegree        Ind's highest degree attained
        
        * EDUCATIONAL SETTING 
        * (13) edufinst         Ind attended non-U.S. educ institution?
        * (14) edufdegree       Ind's highest non-U.S. degree attained

        * LEVEL OF EDUCATION
        * (15) edulevel         Ind's highest level of education
        * (16) edulevelmax      Ind's highest level of education, max ever response
        * (17) edulevelrp       RP's highest level of education
        * (18) edulevelsp       SP's highest level of education
        * (19) edulevelrc       RP/SP's joint highest level of education
        * (20) edulevelmaxrp    RP's highest level of education, max ever response
        * (21) edulevelmaxsp    SP's highest level of education, max ever response
        * (22) edulevelmaxrc    RP/SP's joint highest level of education, max ever response
        
* This file uses the PSID-SHELF's intermediate data file (all collected 
* variables), which merged several different files that were originally based on 
* the PSID Complete Main Study, 1968–2019. 
*/


*-------------------------------------------------------------------------*
* Data attribution
*-------------------------------------------------------------------------*

/*
* PSID-SHELF started as a project led by Fabian Pfeffer. The data and 
* construction files were compiled by Davis Daumler. 

* Analytic contributions were provided by Patricia Andreski, Davis Daumler, 
* Esther Friedman, Florian Hertel, Noura Insolera, Fabian Pfeffer, Mehmet 
* Zahid Samancioglu, Andreja Siliunas, and Brittany Vasquez.
*/


*-------------------------------------------------------------------------*
* Open all collected variables
*-------------------------------------------------------------------------*

* Prepare for regular-sized dataset:
clear 
clear matrix
clear mata
set maxvar 32000

* Open all collected variables in wide format:
use "$temp_psid/datagen_shelf_01_education_wide.dta", clear // just opening the education variables


*-------------------------------------------------------------------------*
* Data preparation
*-------------------------------------------------------------------------*

* Set macro for every survey year of the PSID: 1968/1997, 1999(2)2019
* (I.e., to accommodate the PSID's annual/biennial data structure.)
numlist "1968/1997 1999(2)2021"
global year = r(numlist)
global n_year = wordcount("$year")
di "N years = ${n_year}; years: ${year}."


*-------------------------------------------------------------------------*
* Value labels
*-------------------------------------------------------------------------*

* Highest grade completed:
#delimit ;
lab def educomp_9cat
    0 "0–5 grades, has difficulty reading or writing"
    1 "0–5 grades, no difficulty reading or writing"
    2 "6–8 grades"
    3 "9–11 grades"
    4 "12 grades, completed high school"
    5 "12 grades, completed high school and nonacademic training"
    6 "College, no degree"
    7 "College, bachelor's degree"
    8 "College, advanced or professional degree"
    , modify
;
#delimit cr

* Graduated high school?
#delimit ;
lab def eduhsgrad_3cat
    0 "No high school diploma and no GED"
    1 "Has a high school diploma"
    2 "Has a GED"
    , modify
;
#delimit cr

* Attended college?
#delimit ;
lab def eduanycol_2cat
    0 "Has not attended college"
    1 "Has attended college"
    , modify
;
#delimit cr

* Ind's highest degree attained:
#delimit ;
lab def edudegree_8cat
    1 "Associate's degree (AA)"
    2 "Bachelor's degree (BA, BS)"
    3 "Master's degree (MA, MS, MBA)"
    4 "Doctoral degree (PhD)"
    5 "Law degree (LLB, JD)"
    6 "Medical degree (MD, DDS, DVM, DO)"
    7 "Other degree, honorary"
    8 "Other degree, unspecified"
    , modify
;
#delimit cr

* Ind attended non-U.S. educ institution?
#delimit ;
lab def edufinst_4cat
    1 "US only"
    2 "Outside US only"
    3 "Both US and outside US"
    4 "No education"
    , modify
;
#delimit cr

* Ind's highest non-U.S. degree attained:
#delimit ;
lab def edufdegree_7cat
    1 "Did not attend high school"
    2 "Attended high school but no diploma"
    3 "High school diploma"
    4 "Associate's degree"
    5 "Bachelor's degree (BA, BS)"
    6 "Master's degree (MA, MS, MBA)"
    7 "Doctoral or medical degree (PhD, MD, DD)"
    , modify
;
#delimit cr

* Ind's highest level of education:
#delimit ;
lab def edulevel_5cat
    0 "Did not complete high school"
    1 "Completed high school, did not attend college"
    2 "Attended college, no bachelor's degree"
    3 "Bachelor's degree, no postgraduate degree"
    4 "Postgraduate degree"
    , modify
;
#delimit cr

* Describe the newly created value labels:
#delimit ;
lab list 
    educomp_9cat
    eduhsgrad_3cat
    eduanycol_2cat
    edudegree_8cat
    edufinst_4cat
    edufdegree_7cat
    edulevel_5cat
;
#delimit cr


*-------------------------------------------------------------------------*
* (1) eduyear - Ind's years of education
*-------------------------------------------------------------------------*

* Separate assignment for 1968, to carry forward values from 1969-onward: 
capture noisily drop eduyearorig1968
capture noisily drop eduyear1968
capture noisily drop temp_eduyear1968
clonevar eduyearorig1968=(eduyearrep1968)
clonevar eduyear1968=(eduyearrep1968)
clonevar temp_eduyearrep1968=(eduyearrep1968)

* Assign values to each survey year:
foreach i of numlist 2/$n_year {
    local y: word `i' of ${year}
    local ym1: word `=`i'-1' of ${year}
    
    * Generate cloned variable:
    capture noisily drop eduyearorig`y'
    capture noisily drop eduyear`y'
    capture noisily drop temp_eduyearrep`y'
    
    if (inlist(`y', 1969)) {
        gen eduyear`y'=.
        gen temp_eduyearrep`y'=.
    }
    
    if (inrange(`y', 1970, 2099)) {
        clonevar eduyearorig`y'=(eduyearrep`y')
        clonevar eduyear`y'=(eduyearrep`y')
        clonevar temp_eduyearrep`y'=(eduyearrep`y')
    }
    
    * Carry forward values from previous wave if current observation is missing 
    * and if individual is an active member of the survey:
    if (inlist(`y', 1969)) {
        capture noisily drop eduyear`y'
        gen eduyear`y'=.
        lab var eduyear`y' "Ind's years of education, `y'"
        
        replace temp_eduyearrep`y'=(temp_eduyearrep`ym1') if ((eduyear`y'==.) & (temp_eduyearrep`ym1'!=.))
        replace eduyear`y'=(temp_eduyearrep`ym1')         if ((eduyear`y'==.) & (temp_eduyearrep`ym1'!=.)) & (fid`y'!=. & relx`y'!=.)
    }
        
    if (inrange(`y', 1970, 2099)) {
        replace temp_eduyearrep`y'=(temp_eduyearrep`ym1') if ((eduyear`y'==.) & (temp_eduyearrep`ym1'!=.))
        replace eduyear`y'=(temp_eduyearrep`ym1')         if ((eduyear`y'==.) & (temp_eduyearrep`ym1'!=.)) & (fid`y'!=. & relx`y'!=.)
    }
}

* Drop temporary variables:
drop temp_*

* Describe newly created variables:
summarize eduyear19* eduyear20* eduyearorig*


*-------------------------------------------------------------------------*
* (2) eduyearmax - Ind's years of education, max ever response
*-------------------------------------------------------------------------*

* Identify the individual's highest-ever-reported value:
capture noisily drop eduyearmax
egen eduyearmax=rowmax(eduyear19* eduyear20*)
lab var eduyearmax "Ind's years of education, max ever response"

* Describe newly created variables:
summarize eduyearmax 


*-------------------------------------------------------------------------*
* (3-8) eduyearrp, eduyearsp, eduyearrc, eduyearmaxrp, eduyearmaxsp, 
* eduyearmaxrc - RP's (SP's; RP/SP's joint) years of
* education (max ever)
*-------------------------------------------------------------------------*

* Assign individual values to reference person and SP:
foreach i of numlist 1/$n_year {
    local y: word `i' of ${year}
    
    foreach j of numlist 1/2 {
        local rel:        word `j' of "rp" "sp" 
        local rel_lab:    word `j' of "RP" "SP"
        local rel_valmin: word `j' of 100  200
        local rel_valmax: word `j' of 199  299
        
        * Generate a new variable for the PSID-SHELF data:
        capture noisily drop temp_eduyear`rel'`y'
        capture noisily drop temp_eduyearmax`rel'`y'
        capture noisily drop eduyear`rel'`y'
        capture noisily drop eduyearmax`rel'`y'
        gen temp_eduyear`rel'`y'=-1
        gen temp_eduyearmax`rel'`y'=-1
        
        * Collect education for each role:
        replace temp_eduyear`rel'`y'=(eduyear`y') if inrange(relx`y', `rel_valmin', `rel_valmax')
        replace temp_eduyear`rel'`y'=.            if !inrange(relx`y', `rel_valmin', `rel_valmax')
        bysort fid`y': egen eduyear`rel'`y'=max(temp_eduyear`rel'`y')
        
        replace temp_eduyearmax`rel'`y'=(eduyearmax) if inrange(relx`y', `rel_valmin', `rel_valmax')
        replace temp_eduyearmax`rel'`y'=.            if !inrange(relx`y', `rel_valmin', `rel_valmax')
        bysort fid`y': egen eduyearmax`rel'`y'=max(temp_eduyearmax`rel'`y')
        
        * Label new variables:
        lab var eduyear`rel'`y' "`rel_lab''s years of education, `y'"
        lab var eduyearmax`rel'`y' "`rel_lab''s years of education, max ever response, `y'"
    }
    
    * Generate a new variable for the PSID-SHELF data:
    capture noisily drop eduyearrc`y'
    capture noisily drop eduyearmaxrc`y'

    * Assign highest value to reference couple:
    egen eduyearrc`y'=rowmax(eduyearrp`y' eduyearsp`y')    
    egen eduyearmaxrc`y'=rowmax(eduyearmaxrp`y' eduyearmaxsp`y')
    
    * Label new variables:
    lab var eduyearrc`y' "RP/SP's joint highest years of education, `y'"
    lab var eduyearmaxrc`y' "RP/SP's joint highest years of education, max ever response, `y'"
}

* Drop temporary variables:
drop temp_*

* Describe newly created variables:
summarize eduyearrp* eduyearmaxrp* eduyearsp* eduyearmaxsp* eduyearrc* eduyearmaxrc*


*-------------------------------------------------------------------------*
* (9-14) educomp, eduhsgrad, eduanycol, edudegree, edufinst, edufdegree - 
* Educational classification, individual level, for each specification
*-------------------------------------------------------------------------*

* Create list of education variables to assign to the individual level:
#delimit ;
global vars_educ
    "
    educomp
    eduhsgrad
    eduanycol
    edudegree
    edufinst
    edufdegree
    "
;
global vars_educ_lab
    `"
    "Ind's highest grade completed,"
    "Ind graduated high school?"
    "Ind entered college?"
    "Ind's highest degree attained,"
    "Ind attended non-U.S. educ institution?"
    "Ind's highest non-U.S. degree attained,"
    "'
;
global vars_educ_val
    "
    educomp_9cat
    eduhsgrad_3cat
    eduanycol_2cat
    edudegree_8cat
    edufinst_4cat
    edufdegree_7cat
    "
;
global n_vars_educ=wordcount("${vars_educ}")
;
#delimit cr

* Assign each measure of education to the individual level:
foreach h of numlist 1/$n_vars_educ {
    local var: word `h' of ${vars_educ}
    local varlab: word `h' of ${vars_educ_lab}
    local vallab: word `h' of ${vars_educ_val}
    
    foreach i of numlist 1/$n_year {
        local y: word `i' of ${year}
            
        * Generate a new variable for the PSID-SHELF data:
        capture noisily drop `var'`y'
        gen `var'`y'=-1
        lab var `var'`y' "`varlab' `y'" /* (Note: Removed comma before `y' to allow for question marks; inserted into value label macro.) */
        
        * Assign values for the combined measure of education:
        capture noisily confirm variable `var'reprp`y'
            if (_rc==0) replace `var'`y'=(`var'reprp`y') if inrange(relx`y', 100, 199)
            if (_rc!=0) replace `var'`y'=.               if inrange(relx`y', 100, 199)
        
        capture noisily confirm variable `var'repsp`y' /* (Note: Assign value if RP or SP variable exists; otherwise assign missing.) */
            if (_rc==0) replace `var'`y'=(`var'repsp`y') if inrange(relx`y', 200, 299)
            if (_rc!=0) replace `var'`y'=.               if inrange(relx`y', 200, 299)
        
        replace `var'`y'=. if !inrange(relx`y', 100, 299)
        
        * Assign value labels to the newly created variable:
        lab val `var'`y' `vallab'
    }
}

* Separate assignment for 1968, to carry forward values from 1969-onward: 
capture noisily drop educomporig1968
capture noisily drop eduhsgradorig1968
capture noisily drop eduanycolorig1968
capture noisily drop edudegreeorig1968
capture noisily drop edufinstorig1968
capture noisily drop edufdegreeorig1968
capture noisily drop temp_educomp1968
capture noisily drop temp_eduhsgrad1968
capture noisily drop temp_eduanycol1968
capture noisily drop temp_edudegree1968
capture noisily drop temp_edufinst1968
capture noisily drop temp_edufdegree1968
clonevar educomporig1968=(educomp1968)
clonevar eduhsgradorig1968=(eduhsgrad1968)
clonevar eduanycolorig1968=(eduanycol1968)
clonevar edudegreeorig1968=(edudegree1968)
clonevar edufinstorig1968=(edufinst1968)
clonevar edufdegreeorig1968=(edufdegree1968)
clonevar temp_educomp1968=(educomp1968)
clonevar temp_eduhsgrad1968=(eduhsgrad1968)
clonevar temp_eduanycol1968=(eduanycol1968)
clonevar temp_edudegree1968=(edudegree1968)
clonevar temp_edufinst1968=(edufinst1968)
clonevar temp_edufdegree1968=(edufdegree1968)

* Create a combined measure of education:
foreach h of numlist 1/$n_vars_educ {
    local var: word `h' of ${vars_educ}
    local varlab: word `h' of ${vars_educ_lab}
    local vallab: word `h' of ${vars_educ_val}
    
    foreach i of numlist 2/$n_year {
        local y: word `i' of ${year}
        local ym1: word `=`i'-1' of ${year}
        
        * Generate cloned variable:
        capture noisily drop educomporig`y'
        capture noisily drop eduhsgradorig`y'
        capture noisily drop eduanycolorig`y'
        capture noisily drop edudegreeorig`y'
        capture noisily drop edufinstorig`y'
        capture noisily drop edufdegreeorig`y'
        capture noisily drop temp_educomp`y'
        capture noisily drop temp_eduhsgrad`y'
        capture noisily drop temp_eduanycol`y'
        capture noisily drop temp_edudegree`y'
        capture noisily drop temp_edufinst`y'
        capture noisily drop temp_edufdegree`y'
        clonevar educomporig`y'=(educomp`y')
        clonevar eduhsgradorig`y'=(eduhsgrad`y')
        clonevar eduanycolorig`y'=(eduanycol`y')
        clonevar edudegreeorig`y'=(edudegree`y')
        clonevar edufinstorig`y'=(edufinst`y')
        clonevar edufdegreeorig`y'=(edufdegree`y')
        clonevar temp_educomp`y'=(educomp`y')
        clonevar temp_eduhsgrad`y'=(eduhsgrad`y')
        clonevar temp_eduanycol`y'=(eduanycol`y')
        clonevar temp_edudegree`y'=(edudegree`y')
        clonevar temp_edufinst`y'=(edufinst`y')
        clonevar temp_edufdegree`y'=(edufdegree`y')
        
        * Carry forward values from previous wave if current observation is 
        * missing and if individual is an active member of the survey:
        replace temp_educomp`y'=(temp_educomp`ym1')       if ((educomp`y'==.)    & (temp_educomp`ym1'!=.))
        replace educomp`y'=(temp_educomp`ym1')            if ((educomp`y'==.)    & (temp_educomp`ym1'!=.))    & (fid`y'!=. & relx`y'!=.)
        
        replace temp_eduhsgrad`y'=(temp_eduhsgrad`ym1')   if ((eduhsgrad`y'==.)  & (temp_eduhsgrad`ym1'!=.))
        replace eduhsgrad`y'=(temp_eduhsgrad`ym1')        if ((eduhsgrad`y'==.)  & (temp_eduhsgrad`ym1'!=.))  & (fid`y'!=. & relx`y'!=.)
        
        replace temp_eduanycol`y'=(temp_eduanycol`ym1')   if ((eduanycol`y'==.)  & (temp_eduanycol`ym1'!=.))
        replace eduanycol`y'=(temp_eduanycol`ym1')        if ((eduanycol`y'==.)  & (temp_eduanycol`ym1'!=.))  & (fid`y'!=. & relx`y'!=.)
        
        replace temp_edudegree`y'=(temp_edudegree`ym1')   if ((edudegree`y'==.)  & (temp_edudegree`ym1'!=.))
        replace edudegree`y'=(temp_edudegree`ym1')        if ((edudegree`y'==.)  & (temp_edudegree`ym1'!=.))  & (fid`y'!=. & relx`y'!=.)
        
        replace temp_edufinst`y'=(temp_edufinst`ym1')     if ((edufinst`y'==.)   & (temp_edufinst`ym1'!=.))
        replace edufinst`y'=(temp_edufinst`ym1')          if ((edufinst`y'==.)   & (temp_edufinst`ym1'!=.))   & (fid`y'!=. & relx`y'!=.)
        
        replace temp_edufdegree`y'=(temp_edufdegree`ym1') if ((edufdegree`y'==.) & (temp_edufdegree`ym1'!=.))
        replace edufdegree`y'=(temp_edufdegree`ym1')      if ((edufdegree`y'==.) & (temp_edufdegree`ym1'!=.)) & (fid`y'!=. & relx`y'!=.)
    }    
}

* Drop temporary variables:
drop temp_*

* Describe the newly created variables:
summarize educomp* eduhsgrad* eduanycol* edudegree* edufinst* edufdegree*


*-------------------------------------------------------------------------*
* (15) edulevel - Ind's highest level of education
*-------------------------------------------------------------------------*

* Separate assignment for 1968, to carry forward values from 1969-onward: 
capture noisily drop edulevel1968
gen edulevel1968=-1
lab var edulevel1968 "Ind's highest level of education, 1968"
replace edulevel1968=0 if inrange(educomp1968, 0, 3)   & (educomp1968!=.)
replace edulevel1968=1 if inrange(educomp1968, 4, 5)   & (educomp1968!=.)
replace edulevel1968=2 if inlist(educomp1968, 6)       & (educomp1968!=.)
replace edulevel1968=3 if inlist(educomp1968, 7)       & (educomp1968!=.)
replace edulevel1968=4 if inlist(educomp1968, 8)       & (educomp1968!=.)
replace edulevel1968=0 if inrange(eduyear1968, 0, 11)  & (educomp1968==.)
replace edulevel1968=1 if inrange(eduyear1968, 12, 12) & (educomp1968==.)
replace edulevel1968=2 if inrange(eduyear1968, 13, 15) & (educomp1968==.)
replace edulevel1968=3 if inrange(eduyear1968, 16, 16) & (educomp1968==.)
replace edulevel1968=4 if inrange(eduyear1968, 17, 17) & (educomp1968==.)
replace edulevel1968=. if (eduyear1968==.)             & (educomp1968==.)

* Generate a combined measure for Ind's highest level of education:
foreach i of numlist 2/$n_year {
    local y: word `i' of ${year}
    local ym1: word `=`i'-1' of ${year}
    
    * Generate a new variable for the PSID-SHELF data:
    capture noisily drop temp_edulevel1`y'
    capture noisily drop temp_edulevel2`y'
    capture noisily drop temp_edulevel3`y'
    capture noisily drop edulevel`y'
    gen temp_edulevel1`y'=-1
    gen temp_edulevel2`y'=-1
    gen temp_edulevel3`y'=-1
    gen edulevel`y'=-1
    lab var edulevel`y' "Ind's highest level of education, `y'"
        
    * Version 1, 1985-present values:
    if (inrange(`y', 1985, 2099)) {
        replace temp_edulevel1`y'=0 if inlist(eduhsgrad`y', 0)       & inlist(eduanycol`y', 0)    & !inrange(edudegree`y', 1, 8)
        replace temp_edulevel1`y'=1 if inlist(eduhsgrad`y', 1, 2)    & inlist(eduanycol`y', 0)    & !inrange(edudegree`y', 1, 8)
        replace temp_edulevel1`y'=2 if inlist(eduhsgrad`y', 0, 1, 2) & ((inlist(eduanycol`y', 1)  & !inrange(edudegree`y', 1, 8)) | ((inlist(eduanycol`y', 0, 1) & inlist(edudegree`y', 1, 8))))
        replace temp_edulevel1`y'=3 if inlist(eduhsgrad`y', 0, 1, 2) & inlist(eduanycol`y', 0, 1) & inlist(edudegree`y', 2)
        replace temp_edulevel1`y'=4 if inlist(eduhsgrad`y', 0, 1, 2) & inlist(eduanycol`y', 0, 1) & inrange(edudegree`y', 3, 7)
        
        replace temp_edulevel1`y'=. if (eduhsgrad`y'==.) & inlist(eduanycol`y', 0)    & !inrange(edudegree`y', 1, 8)
        replace temp_edulevel1`y'=2 if (eduhsgrad`y'==.) & ((inlist(eduanycol`y', 1)  & !inrange(edudegree`y', 1, 8)) | ((inlist(eduanycol`y', 0, 1) & inlist(edudegree`y', 1, 8))))
        replace temp_edulevel1`y'=3 if (eduhsgrad`y'==.) & inlist(eduanycol`y', 0, 1) & inlist(edudegree`y', 2)
        replace temp_edulevel1`y'=4 if (eduhsgrad`y'==.) & inlist(eduanycol`y', 0, 1) & inrange(edudegree`y', 3, 7)

        replace temp_edulevel1`y'=0 if inlist(eduhsgrad`y', 0)    & (eduanycol`y'==.) & !inrange(edudegree`y', 1, 8)
        replace temp_edulevel1`y'=1 if inlist(eduhsgrad`y', 1, 2) & (eduanycol`y'==.) & !inrange(edudegree`y', 1, 8)
        replace temp_edulevel1`y'=. if (eduhsgrad`y'==.)          & (eduanycol`y'==.) & !inrange(edudegree`y', 1, 8)
    }
    
    * Version 2, 1968 values: 
    if (inrange(`y', 1968, 1990)) {
        replace temp_edulevel2`y'=0 if inrange(educomp`y', 0, 3)
        replace temp_edulevel2`y'=1 if inrange(educomp`y', 4, 5)
        replace temp_edulevel2`y'=2 if inlist(educomp`y', 6)
        replace temp_edulevel2`y'=3 if inlist(educomp`y', 7)
        replace temp_edulevel2`y'=4 if inlist(educomp`y', 8)
        replace temp_edulevel2`y'=. if (educomp`y'==.)
    }
    
    * Version 3, 1968, 1970-present values:
    if ((inlist(`y', 1968)) | (inrange(`y', 1970, 2099))) {
        replace temp_edulevel3`y'=0 if inrange(eduyear`y', 0, 11)
        replace temp_edulevel3`y'=1 if inrange(eduyear`y', 12, 12)
        replace temp_edulevel3`y'=2 if inrange(eduyear`y', 13, 15)
        replace temp_edulevel3`y'=3 if inrange(eduyear`y', 16, 16)
        replace temp_edulevel3`y'=4 if inrange(eduyear`y', 17, 17)
        replace temp_edulevel3`y'=. if (eduyear`y'==.)
    }
    
    * Combined variable, 1969 values:
    replace edulevel`y'=(temp_edulevel2`y') if inrange(`y', 1969, 1969) & (temp_edulevel2`y'!=.)
    replace edulevel`y'=.                   if inrange(`y', 1969, 1969) & (temp_edulevel2`y'==.)
    
    * Combined variable, 1970-1984 values:
    replace edulevel`y'=(temp_edulevel2`y') if inrange(`y', 1970, 1984) & (temp_edulevel2`y'!=.)
    replace edulevel`y'=(temp_edulevel3`y') if inrange(`y', 1970, 1984) & (temp_edulevel2`y'==. & temp_edulevel3`y'!=.)
    replace edulevel`y'=.                   if inrange(`y', 1970, 1984) & (temp_edulevel2`y'==. & temp_edulevel3`y'==.)
    
    * Combined variable, 1985-1990 values:
    replace edulevel`y'=(temp_edulevel1`y') if inrange(`y', 1985, 1990) & (temp_edulevel1`y'!=.)
    replace edulevel`y'=(temp_edulevel2`y') if inrange(`y', 1985, 1990) & (temp_edulevel1`y'==. & temp_edulevel2`y'!=.)
    replace edulevel`y'=(temp_edulevel3`y') if inrange(`y', 1985, 1990) & (temp_edulevel1`y'==. & temp_edulevel2`y'==. & temp_edulevel3`y'!=.)
    replace edulevel`y'=.                   if inrange(`y', 1985, 1990) & (temp_edulevel1`y'==. & temp_edulevel2`y'==. & temp_edulevel3`y'==.)
    
    * Combined variable, 1991-present values:
    replace edulevel`y'=(temp_edulevel1`y') if inrange(`y', 1991, 2099) & (temp_edulevel1`y'!=.)
    replace edulevel`y'=(temp_edulevel3`y') if inrange(`y', 1991, 2099) & (temp_edulevel1`y'==. & temp_edulevel3`y'!=.)
    replace edulevel`y'=.                   if inrange(`y', 1991, 2099) & (temp_edulevel1`y'==. & temp_edulevel3`y'==.)
    
    * Assign value labels to the newly created variable:
    lab val edulevel`y' edulevel_5cat
}

* Drop temporary variables:
drop temp_*

* Describe newly created variables:
summarize edulevel*


*-------------------------------------------------------------------------*
* (16) edulevelmax - Ind's highest level of education, max ever response
*-------------------------------------------------------------------------*

* Identify the individual's highest-ever-reported value:
capture noisily drop edulevelmax
egen edulevelmax=rowmax(edulevel*)
lab var edulevelmax "Ind's highest level of education, max ever response"

* Assign value labels to the newly created variable:
lab val edulevelmax edulevel_5cat

* Describe newly created variables:
summarize edulevelmax


*-------------------------------------------------------------------------*
* (17-22) edulevelrp, edulevelsp, edulevelrc, edulevelmaxrp, edulevelmaxsc,
* edulevelmaxrc - Educational classification, for each specification
*-------------------------------------------------------------------------*

* Create list of education variables to assign to the RP, SP, and RP/SP levels:
#delimit ;
global vars_educ
    "
    edulevel
    edulevelmax
    "
;
global vars_educ_lab
    `"
    "highest level of education"
    "highest level of education, max ever response"
    "'
;
global vars_educ_val
    "
    edulevel_5cat
    edulevel_5cat
    "
;
global vars_educ_yearvary
    "
    yearvary
    noyearvary
    "
;
global n_vars_educ=wordcount("${vars_educ}")
;
#delimit cr

* Assign each measure of education to the individual level:
foreach h of numlist 1/$n_vars_educ {
    local var: word `h' of ${vars_educ}
    local varlab: word `h' of ${vars_educ_lab}
    local vallab: word `h' of ${vars_educ_val}
    local yearvary: word `h' of ${vars_educ_yearvary}
    
    foreach i of numlist 1/$n_year {
        local y: word `i' of ${year}
        if ("`yearvary'"=="yearvary") local yvar=(`y')
        if ("`yearvary'"=="noyearvary") local yvar=""
           
        * Generate a new variable for the PSID-SHELF data:
        capture noisily drop `var'rp`y'
        capture noisily drop `var'sp`y'
        capture noisily drop `var'rc`y'
        capture noisily drop temp_`var'rp`y'
        capture noisily drop temp_`var'sp`y'
        gen temp_`var'rp`y'=-1
        gen temp_`var'sp`y'=-1
        
        * Assign values for the measure of education:
        replace temp_`var'rp`y'=(`var'`yvar') if inrange(relx`y', 100, 199)
        replace temp_`var'rp`y'=.             if !inrange(relx`y', 100, 199)
        bysort fid`y': egen `var'rp`y'=max(temp_`var'rp`y')
        
        replace temp_`var'sp`y'=(`var'`yvar') if inrange(relx`y', 200, 299)
        replace temp_`var'sp`y'=.             if !inrange(relx`y', 200, 299)
        bysort fid`y': egen `var'sp`y'=max(temp_`var'sp`y')
        
        egen `var'rc`y'=rowmax(`var'rp`y' `var'sp`y')
        
        * Label new variables:
        lab var `var'rp`y' "RP's `varlab', `y'" 
        lab var `var'sp`y' "SP's `varlab', `y'"
        lab var `var'rc`y' "RP/SP's joint `varlab', `y'"
        
        * Assign value labels to the newly created variable:
        lab val `var'rp`y' `vallab'
        lab val `var'sp`y' `vallab'
        lab val `var'rc`y' `vallab'
    }
}

* Describe the newly created variables:
summarize edulevelrp* edulevelsp* edulevelrc* edulevelmaxrp* edulevelmaxsp* edulevelmaxrc*  


*-------------------------------------------------------------------------*
* Prepare to save education measures
*-------------------------------------------------------------------------*

* Identify education measures:
#delimit ;
global var_generate_education
       eduyearrep*
       educompreprp*
       educomprepsp*
       eduhsgradrepsp*
       eduhsgradreprp*
       eduanycolreprp*
       eduanycolrepsp*
       edudegreereprp*
       edudegreerepsp*
       edufinstreprp*
       edufinstrepsp*
       edufdegreereprp*
       edufdegreerepsp*
       
       eduyear19* eduyear20*
       eduyearrp*
       eduyearsp*
       eduyearrc*
       eduyearmax
       eduyearmaxrp*
       eduyearmaxsp*
       eduyearmaxrc*
       edulevel19* edulevel20*
       edulevelrp*
       edulevelsp*
       edulevelrc*
       edulevelmax
       edulevelmaxrp*
       edulevelmaxsp*
       edulevelmaxrc*
       educomp19* educomp20*
       eduhsgrad19* eduhsgrad20*
       eduanycol19* eduanycol20*
       edudegree19* edudegree20*
       edufinst19* edufinst20*
       edufdegree19* edufdegree20*      
;
global n_var_generate_education = wordcount("${var_generate_education}")
;
#delimit cr

* Check variable count:
di "N (sets of) vars total = ${n_var_generate_education}"


*-------------------------------------------------------------------------*
* Save the education measures in wide format
*-------------------------------------------------------------------------*

* Keep and reorder variables:
keep id ${var_generate_education}
order id ${var_generate_education}

* Sort data:
sort id

* Describe data:
describe, short
codebook id

* Compress file size:
compress

* Save the education measures in wide format:
save "$created_data_psid/datagen_shelf_03_education_wide.dta", replace

* Reshape to long
reshape long eduyearrep educompreprp educomprepsp eduhsgradrepsp eduhsgradreprp eduanycolreprp eduanycolrepsp edudegreereprp edudegreerepsp edufinstreprp edufinstrepsp edufdegreereprp edufdegreerepsp eduyear eduyearrp eduyearsp eduyearrc eduyearmaxrp eduyearmaxsp eduyearmaxrc edulevel edulevelrp edulevelsp edulevelrc edulevelmaxrp edulevelmaxsp edulevelmaxrc educomp eduhsgrad eduanycol edudegree edufinst edufdegree, i(id eduyearmax edulevelmax) j(survey_yr)

rename id unique_id

browse unique_id survey_yr edulevel edulevelmax eduyear eduyearmax // individ vars	

label define educ 1 "LTHS" 2 "HS" 3 "Some College" 4 "College+"
foreach var in edulevel edulevelmax edulevelrp edulevelmaxrp edulevelsp edulevelmaxsp{
	recode `var' (0=1)(1=2)(2=3)(3/4=4), gen(`var'_match)
	label values `var'_match educ
}

browse unique_id survey_yr *match 

save "$created_data_psid/datagen_shelf_03_education_long.dta", replace
