********************************************************************************
*** PSID-SHELF DATA PROJECT                                           **********
*** Construction - 03 Generate ethnoracial measures                   **********
*** Last update: 2023.10.10, DD                                       **********
********************************************************************************

*-------------------------------------------------------------------------*
* File preamble
*-------------------------------------------------------------------------*

/*
* This file is used to construct the PSID's Social, Health, and Economic 
* Longitudinal File (PSID-SHELF). The "03 Generate ethnoracial measures" file 
* creates ethnoracial measures, related to: racial/ethnic identity, for members
* of the reference couple, individuals, and summary measures for individuals.

* The following variables are generated by this file:

        * RACIAL/ETHNIC IDENTITY, REFERENCE COUPLE
        * (1)  racex1mrp        RP's race/ethnicity, extended, mention 1
        * (2)  racex2mrp        RP's race/ethnicity, extended, mention 2
        * (3)  racex3mrp        RP's race/ethnicity, extended, mention 3
        * (4)  racex4mrp        RP's race/ethnicity, extended, mention 4
        * (5)  racex1msp        SP's race/ethnicity, extended, mention 1
        * (6)  racex2msp        SP's race/ethnicity, extended, mention 2
        * (7)  racex3msp        SP's race/ethnicity, extended, mention 3
        * (8)  racex4msp        SP's race/ethnicity, extended, mention 4
        * (9)  racerp           RP's race/ethnicity, from first mention
        * (10) racexrp          RP's race/ethnicity, from first mention, extended
        * (11) racesp           SP's race/ethnicity, from first mention
        * (12) racexsp          SP's race/ethnicity, from first mention, extended     
        * (13) racemmrp         RP's race/ethnicity, from multi mention
        * (14) racemmxrp        RP's race/ethnicity, from multi mention, extended
        * (15) racemmsp         SP's race/ethnicity, from multi mention
        * (16) racemmxsp        SP's race/ethnicity, from multi mention, extended
        
        * RACIAL/ETHNIC IDENTITY, INDIVIDUAL
        * (17) race1mrep        Ind's reported race, mention 1
        * (18) race2mrep        Ind's reported race, mention 2
        * (19) race3mrep        Ind's reported race, mention 3
        * (20) race4mrep        Ind's reported race, mention 4
        * (21) ethospanrep      Ind's reported ethnic origin, Spanish descent
        * (22) racex            Ind's race/ethnicity, from first mention, extended
        * (23) racemmx          Ind's race/ethnicity, from multi mention, extended
        
        * RACIAL/ETHNIC IDENTITY, SUMMARY MEASURE FOR INDIVIDUAL
        * (24) race             Ind's race/ethnicity, majority response, from first mention
        * (25) racemm           Ind's race/ethnicity, majority response, from multi mention

* This file uses the PSID-SHELF's intermediate data file (all collected 
* variables), which merged several different files that were originally based on 
* the PSID Complete Main Study, 1968–2019. 
*/


*-------------------------------------------------------------------------*
* Data attribution
*-------------------------------------------------------------------------*

/*
* PSID-SHELF started as a project led by Fabian Pfeffer. The data and 
* construction files were compiled by Davis Daumler. 

* Analytic contributions were provided by Patricia Andreski, Davis Daumler, 
* Esther Friedman, Florian Hertel, Noura Insolera, Fabian Pfeffer, Mehmet 
* Zahid Samancioglu, Andreja Siliunas, and Brittany Vasquez.
*/


*-------------------------------------------------------------------------*
* Open all collected variables
*-------------------------------------------------------------------------*

* Prepare for regular-sized dataset:
clear 
clear matrix
clear mata
set maxvar 32000

* Open all collected variables in wide format:
use "${psidshelf_root}/Construction_Files/Data/Merge/datagen_shelf_02_all_collected_variables_wide.dta", clear


*-------------------------------------------------------------------------*
* Data preparation
*-------------------------------------------------------------------------*

* Set macro for every survey year of the PSID: 1968/1997, 1999(2)2019
* (I.e., to accommodate the PSID's annual/biennial data structure.)
numlist "1968/1997 1999(2)2019"
global year = r(numlist)
global n_year = wordcount("$year")
di "N years = ${n_year}; years: ${year}."


*-------------------------------------------------------------------------*
* Value labels
*-------------------------------------------------------------------------*

/*
* Note: There are considerable differences in how racial identities were coded
* across survey years. This led to the need for duplicate value labels: 

    (PSID-SHELF value label) 04 "Asian"
    (PSID-SHELF value label) 05 "Native Hawaiian or Pacific Islander"
    (PSID-SHELF value label) 06 "Asian or Pacific Islander"

* The chief goal of the harmonized measures is to maximize detail for users and 
* to eliminate variable inconsistencies across years.
    
* From 1968 to 1984, it was impossible to distinguish Asians from Pacific 
* Islanders. Beginning in 1985, the combined category was separated into two
* categories. Similarly, (PSID-SHELF value label) 03 "American Indian or Alaska
* Native" was only introduced as a category in 1985. From 1968–2003, there were
* different iterations of (PSID-SHELF value label) 08 "Mentions Spanish origin
* or descent", which continued, even after the PSID introduced a question about
* ethnic origin/Spanish descent in 1985; some individuals continued to have
* racial identities coded as "Hispanic" or "Spanish origin or descent". Prior to
* 1994, individuals could also be coded as (PSID-SHELF value label) 09 "More
* than one mention", even after the PSID introduced second reports for
* racial identity in in 1985, though this category ceased after the PSID 
* introduced third and fourth reports of racial identity in 1994. 
*/

* Race:
#delimit ;
lab def race_9cat
    1 "White"
    2 "Black"
    3 "American Indian or Alaska Native"
    4 "Asian"
    5 "Native Hawaiian or Pacific Islander"
    6 "Asian or Pacific Islander"
    7 "Other race"
    8 "Mentions Spanish origin or descent"
    9 "More than one mention"
    , modify
;
#delimit cr

* Ethnic origin, Spanish descent:
#delimit ;
lab def ethospanrep_8cat
    0 "No Spanish descent"
    1 "Spanish descent (Mexican)"
    2 "Spanish descent (Mexican American)"
    3 "Spanish descent (Chicano)"
    4 "Spanish descent (Puerto Rican)"
    5 "Spanish descent (Cuban)"
    6 "Spanish descent (Hispanic, Latino, other ethnicity of Spanish descent)"
    7 "Spanish descent (More than one mention)"
    , modify
;
#delimit cr

* Race/ethnicity #1:
#delimit ;
lab def raceethnicity_4cat1
    1 "White"
    2 "Black"
    3 "Other race"
    4 "Spanish descent"
    , modify
;
#delimit cr

* Race/ethnicity #2:
#delimit ;
lab def raceethnicity_4cat2
    1 "White, non-Hispanic"
    2 "Black, non-Hispanic"
    3 "Other race, non-Hispanic"
    4 "Hispanic"
    , modify
;
#delimit cr

* Race/ethnicity #3, summary measure:
#delimit ;
lab def raceethnicity_4catsummary
    1 "White"
    2 "Black"
    3 "Other race"
    4 "Hispanic"
    , modify
;
#delimit cr

* Race/ethnicity, extended #1:
#delimit ;
lab def raceethnicity_8cat
    1  "White"
    2  "Black"
    3  "American Indian or Alaska Native"
    4  "Asian"
    5  "Native Hawaiian or Pacific Islander"
    6  "Asian or Pacific Islander"
    7  "Other race"
    14 "Spanish descent"
    , modify
;
#delimit cr

* Race/ethnicity, extended #2:
#delimit ;
lab def raceethnicity_14cat
    1  "White, non-Hispanic"
    2  "Black, non-Hispanic"
    3  "American Indian or Alaska Native, non-Hispanic"
    4  "Asian, non-Hispanic"
    5  "Native Hawaiian or Pacific Islander, non-Hispanic"
    6  "Asian or Pacific Islander, non-Hispanic"
    7  "Other race, non-Hispanic"
    8  "White, Hispanic"
    9  "Black, Hispanic"
    10 "American Indian or Alaska Native, Hispanic"
    11 "Asian, Hispanic"
    12 "Native Hawaiian or Pacific Islander, Hispanic"
    13 "Asian or Pacific Islander, Hispanic"
    14 "Other race, Hispanic"    
    , modify
;
#delimit cr

* Describe the newly created value labels:
#delimit ;
lab list 
    race_9cat
    ethospanrep_8cat
    raceethnicity_4cat2
    raceethnicity_8cat
    raceethnicity_14cat
;
#delimit cr

/*
* Note: There are marked disjunctures in how race/ethnicity was measured by the 
* PSID, with respect to: (1) when multiple reports of racial identity were 
* permitted (1985: second mentions; 1994: third and fourth mentions); crucially, 
* (2) when ethnic origin was systematically collected for Hispanic-identifying 
* individuals who were members of the reference couple (1985); and, finally, 
* (3) regarding how racial identity was collected across waves, changing from 
* interviewer identification, with no input from the respondent (1968-1972), to 
* no new reports of race due to the shift to telephone interviews (1973–1984), 
* and then questions about race/ethnicity being added to the survey interview,
* such that respondents self-identify their race/ethnicity (1985–present). 
*/


*-------------------------------------------------------------------------*
* (1-8) racex`k'mrp, racex`k'msp - RP's (SP's) race/ethnicity, extended, 
* for each mention (first through fourth)
*-------------------------------------------------------------------------*

* Create a combined measure of race and ethnic origin (Spanish descent):
foreach i of numlist 1/$n_year {
    local y: word `i' of ${year}
    
    foreach j of numlist 1/2 {
        local rel:     word `j' of "rp" "sp" 
        local rel_lab: word `j' of "RP" "SP"         
        
        * Generate temporary measures of ethnic origin (Spanish descent) in each year:
        capture noisily confirm numeric variable ethospanrep`rel'`y', exact
        if !_rc {
            gen temp_ethospan`rel'`y'=(ethospanrep`rel'`y')
        }
        else {
            gen temp_ethospan`rel'`y'=-1
        }
            
        foreach k of numlist 1/4 {
            local mention_lab: word `k' of "first" "second" "third" "fourth"
            
            * Generate temporary measures of race in each year:
            capture noisily confirm numeric variable race`k'mrep`rel'`y', exact
            if !_rc {
                gen temp_race`k'm`rel'`y'=(race`k'mrep`rel'`y')
            }
            else {
                gen temp_race`k'm`rel'`y'=-1
            }
                                
            * Generate a new variable for the PSID-SHELF data:
            capture noisily drop racex`k'm`rel'`y'
            gen racex`k'm`rel'`y'=-1
            lab var racex`k'm`rel'`y' "`rel_lab''s race/ethnicity, extended,  mention `k', `y'"
            
            * Assign values for the combined measure of race/ethnicity: 
            replace racex`k'm`rel'`y'=1  if inlist(temp_race`k'm`rel'`y', 1)    & (inlist(temp_ethospan`rel'`y', -1, 0) | (temp_ethospan`rel'`y'==.))
            replace racex`k'm`rel'`y'=2  if inlist(temp_race`k'm`rel'`y', 2)    & (inlist(temp_ethospan`rel'`y', -1, 0) | (temp_ethospan`rel'`y'==.))
            replace racex`k'm`rel'`y'=3  if inlist(temp_race`k'm`rel'`y', 3)    & (inlist(temp_ethospan`rel'`y', -1, 0) | (temp_ethospan`rel'`y'==.))
            replace racex`k'm`rel'`y'=4  if inlist(temp_race`k'm`rel'`y', 4)    & (inlist(temp_ethospan`rel'`y', -1, 0) | (temp_ethospan`rel'`y'==.))
            replace racex`k'm`rel'`y'=5  if inlist(temp_race`k'm`rel'`y', 5)    & (inlist(temp_ethospan`rel'`y', -1, 0) | (temp_ethospan`rel'`y'==.))
            replace racex`k'm`rel'`y'=6  if inlist(temp_race`k'm`rel'`y', 6)    & (inlist(temp_ethospan`rel'`y', -1, 0) | (temp_ethospan`rel'`y'==.))
            replace racex`k'm`rel'`y'=7  if inlist(temp_race`k'm`rel'`y', 7, 9) & (inlist(temp_ethospan`rel'`y', -1, 0) | (temp_ethospan`rel'`y'==.))
            replace racex`k'm`rel'`y'=8  if inlist(temp_race`k'm`rel'`y', 1)    & inrange(temp_ethospan`rel'`y', 1, 7)
            replace racex`k'm`rel'`y'=9  if inlist(temp_race`k'm`rel'`y', 2)    & inrange(temp_ethospan`rel'`y', 1, 7)
            replace racex`k'm`rel'`y'=10 if inlist(temp_race`k'm`rel'`y', 3)    & inrange(temp_ethospan`rel'`y', 1, 7)
            replace racex`k'm`rel'`y'=11 if inlist(temp_race`k'm`rel'`y', 4)    & inrange(temp_ethospan`rel'`y', 1, 7)
            replace racex`k'm`rel'`y'=12 if inlist(temp_race`k'm`rel'`y', 5)    & inrange(temp_ethospan`rel'`y', 1, 7)
            replace racex`k'm`rel'`y'=13 if inlist(temp_race`k'm`rel'`y', 6)    & inrange(temp_ethospan`rel'`y', 1, 7)
            replace racex`k'm`rel'`y'=14 if (inlist(temp_race`k'm`rel'`y', 8)   & ((temp_ethospan`rel'`y'!=.) | (temp_ethospan`rel'`y'==.))) | (inlist(temp_race`k'm`rel'`y', 7, 9) & inrange(temp_ethospan`rel'`y', 1, 7))
            replace racex`k'm`rel'`y'=.  if (inlist(temp_race`k'm`rel'`y', -1)) | ((temp_race`k'm`rel'`y'==.) & (inlist(temp_ethospan`rel'`y', -1, 0) | (temp_ethospan`rel'`y'==.)))
        }
        
        * Assign values for the case where race is missing but ethnic origin is nonmissing:
        * (Including this line of code in the loop through mentions 2-4 was producing unintended
        * results regarding the number of "Other race, Hispanic" respondents on the fourth mention,
        * when the reality is that very few respondents complete the fourth mention.)
        replace racex1m`rel'`y'=14 if (temp_race1m`rel'`y'==.) & inrange(temp_ethospan`rel'`y', 1, 7)
        replace racex2m`rel'`y'=.  if (temp_race2m`rel'`y'==.) & inrange(temp_ethospan`rel'`y', 1, 7)
        replace racex3m`rel'`y'=.  if (temp_race3m`rel'`y'==.) & inrange(temp_ethospan`rel'`y', 1, 7)
        replace racex4m`rel'`y'=.  if (temp_race4m`rel'`y'==.) & inrange(temp_ethospan`rel'`y', 1, 7)
        
        * Assign value labels to the newly created variable:
        if (inrange(`y', 1968, 1984) | inrange(`y', 1997, 2003)) {
            lab val racex1m`rel'`y' raceethnicity_8cat
            lab val racex2m`rel'`y' raceethnicity_8cat
            lab val racex3m`rel'`y' raceethnicity_8cat
            lab val racex4m`rel'`y' raceethnicity_8cat         
        }
        
        if (inrange(`y', 1985, 1996) | inrange(`y', 2005, 2099)) {
            lab val racex1m`rel'`y' raceethnicity_14cat
            lab val racex2m`rel'`y' raceethnicity_14cat
            lab val racex3m`rel'`y' raceethnicity_14cat
            lab val racex4m`rel'`y' raceethnicity_14cat         
        }  
    }    
}

* Drop temporary variables:
drop temp_*

* Describe the newly created variables:
summarize racex*mrp* racex*msp*


*-------------------------------------------------------------------------*
* (9-12) racerp, racexrp, racesp, racexsp - RP's (SP's) race/ethnicity, 
* from first mention (extended)
*-------------------------------------------------------------------------*

* Create a combined measure of race and ethnic origin (Spanish descent):
foreach i of numlist 1/$n_year {
    local y: word `i' of ${year}
    
    foreach j of numlist 1/2 {
        local rel:     word `j' of "rp" "sp" 
        local rel_lab: word `j' of "RP" "SP"         
        
        * Generate a new variable for the PSID-SHELF data:
        capture noisily drop race`rel'`y'
        capture noisily drop racex`rel'`y'
        gen race`rel'`y'=-1
        gen racex`rel'`y'=-1
        lab var race`rel'`y'  "`rel_lab''s race/ethnicity, from first mention, `y'"
        lab var racex`rel'`y' "`rel_lab''s race/ethnicity, from first mention, extended, `y'"
        
        * Assign values for the combined measure of race/ethnicity: 
        replace race`rel'`y'=1 if inlist(racex1m`rel'`y', 1)
        replace race`rel'`y'=2 if inlist(racex1m`rel'`y', 2)
        replace race`rel'`y'=3 if inrange(racex1m`rel'`y', 3, 7)
        replace race`rel'`y'=4 if inrange(racex1m`rel'`y', 8, 14)
        replace race`rel'`y'=. if (racex1m`rel'`y'==.)

        * Assign values for the combined measure of race/ethnicity: 
        replace racex`rel'`y'=1  if inlist(racex1m`rel'`y', 1)
        replace racex`rel'`y'=2  if inlist(racex1m`rel'`y', 2)
        replace racex`rel'`y'=3  if inlist(racex1m`rel'`y', 3)
        replace racex`rel'`y'=4  if inlist(racex1m`rel'`y', 4)
        replace racex`rel'`y'=5  if inlist(racex1m`rel'`y', 5)
        replace racex`rel'`y'=6  if inlist(racex1m`rel'`y', 6)
        replace racex`rel'`y'=7  if inlist(racex1m`rel'`y', 7)
        replace racex`rel'`y'=8  if inlist(racex1m`rel'`y', 8)
        replace racex`rel'`y'=9  if inlist(racex1m`rel'`y', 9)
        replace racex`rel'`y'=10 if inlist(racex1m`rel'`y', 10)
        replace racex`rel'`y'=11 if inlist(racex1m`rel'`y', 11)
        replace racex`rel'`y'=12 if inlist(racex1m`rel'`y', 12)
        replace racex`rel'`y'=13 if inlist(racex1m`rel'`y', 13)
        replace racex`rel'`y'=14 if inlist(racex1m`rel'`y', 14)
        replace racex`rel'`y'=.  if (racex1m`rel'`y'==.)
        
        * Assign value labels to the newly created variable:
        if (inrange(`y', 1968, 1984) | inrange(`y', 1997, 2003)) {
            lab val race`rel'`y' raceethnicity_4cat1
            lab val racex`rel'`y' raceethnicity_8cat         
        }
        
        if (inrange(`y', 1985, 1996) | inrange(`y', 2005, 2099)) {
            lab val race`rel'`y' raceethnicity_4cat2
            lab val racex`rel'`y' raceethnicity_14cat         
        }  
        
    }
}

* Describe the newly created variables:
summarize racerp* racexrp* racesp* racexsp*


*-------------------------------------------------------------------------*
* (13-16) racemmrp, racemmxrp, racemmsp, racemmxsp - RP's (SP's) 
* race/ethnicity, from multi mention (extended)
*-------------------------------------------------------------------------*

* Create a combined measure of race and ethnic origin (Spanish descent):
foreach i of numlist 1/$n_year {
    local y: word `i' of ${year}
    
    foreach j of numlist 1/2 {
        local rel:     word `j' of "rp" "sp" 
        local rel_lab: word `j' of "RP" "SP"         
        
        * Generate a new variable for the PSID-SHELF data:
        capture noisily drop racemm`rel'`y'
        capture noisily drop racemmx`rel'`y'
        gen racemm`rel'`y'=-1
        gen racemmx`rel'`y'=-1
        lab var racemm`rel'`y' "`rel_lab''s race/ethnicity, from multi mention, `y'"
        lab var racemmx`rel'`y' "`rel_lab''s race/ethnicity, from multi mention, extended, `y'"
        
        * Assign values for the combined measure of race/ethnicity, from
        * multiple mentions, prioritized by Hispanic (4); Black, non-Hispanic (2); 
        * Other race, non-Hispanic (3); White, non-Hispanic (1).
        replace racemm`rel'`y'=1 if (inlist(racex1m`rel'`y', 1)      | inlist(racex2m`rel'`y', 1)      | inlist(racex3m`rel'`y', 1)      | inlist(racex4m`rel'`y', 1))
        replace racemm`rel'`y'=3 if (inrange(racex1m`rel'`y', 3, 7)  | inrange(racex2m`rel'`y', 3, 7)  | inrange(racex3m`rel'`y', 3, 7)  | inrange(racex4m`rel'`y', 3, 7))
        replace racemm`rel'`y'=2 if (inlist(racex1m`rel'`y', 2)      | inlist(racex2m`rel'`y', 2)      | inlist(racex3m`rel'`y', 2)      | inlist(racex4m`rel'`y', 2))
        replace racemm`rel'`y'=4 if (inrange(racex1m`rel'`y', 8, 14) | inrange(racex2m`rel'`y', 8, 14) | inrange(racex3m`rel'`y', 8, 14) | inrange(racex4m`rel'`y', 8, 14))
        replace racemm`rel'`y'=. if ((racex1m`rel'`y'==.)            & (racex2m`rel'`y'==.)            & (racex3m`rel'`y'==.)            & (racex4m`rel'`y'==.))

        * Assign values for the combined measure of race/ethnicity, from
        * multiple mentions, prioritized by Hispanic (14-8); Black, non-Hispanic (2); 
        * Other race, non-Hispanic (3-7); White, non-Hispanic (1).
        replace racemmx`rel'`y'=1  if (inlist(racex1m`rel'`y', 1)  | inlist(racex2m`rel'`y', 1)  | inlist(racex3m`rel'`y', 1)  | inlist(racex4m`rel'`y', 1))
        replace racemmx`rel'`y'=3  if (inlist(racex1m`rel'`y', 3)  | inlist(racex2m`rel'`y', 3)  | inlist(racex3m`rel'`y', 3)  | inlist(racex4m`rel'`y', 3))
        replace racemmx`rel'`y'=4  if (inlist(racex1m`rel'`y', 4)  | inlist(racex2m`rel'`y', 4)  | inlist(racex3m`rel'`y', 4)  | inlist(racex4m`rel'`y', 4))
        replace racemmx`rel'`y'=5  if (inlist(racex1m`rel'`y', 5)  | inlist(racex2m`rel'`y', 5)  | inlist(racex3m`rel'`y', 5)  | inlist(racex4m`rel'`y', 5))
        replace racemmx`rel'`y'=6  if (inlist(racex1m`rel'`y', 6)  | inlist(racex2m`rel'`y', 6)  | inlist(racex3m`rel'`y', 6)  | inlist(racex4m`rel'`y', 6))
        replace racemmx`rel'`y'=7  if (inlist(racex1m`rel'`y', 7)  | inlist(racex2m`rel'`y', 7)  | inlist(racex3m`rel'`y', 7)  | inlist(racex4m`rel'`y', 7))
        replace racemmx`rel'`y'=2  if (inlist(racex1m`rel'`y', 2)  | inlist(racex2m`rel'`y', 2)  | inlist(racex3m`rel'`y', 2)  | inlist(racex4m`rel'`y', 2))
        replace racemmx`rel'`y'=8  if (inlist(racex1m`rel'`y', 8)  | inlist(racex2m`rel'`y', 8)  | inlist(racex3m`rel'`y', 8)  | inlist(racex4m`rel'`y', 8))
        replace racemmx`rel'`y'=9  if (inlist(racex1m`rel'`y', 9)  | inlist(racex2m`rel'`y', 9)  | inlist(racex3m`rel'`y', 9)  | inlist(racex4m`rel'`y', 9))
        replace racemmx`rel'`y'=10 if (inlist(racex1m`rel'`y', 10) | inlist(racex2m`rel'`y', 10) | inlist(racex3m`rel'`y', 10) | inlist(racex4m`rel'`y', 10))
        replace racemmx`rel'`y'=11 if (inlist(racex1m`rel'`y', 11) | inlist(racex2m`rel'`y', 11) | inlist(racex3m`rel'`y', 11) | inlist(racex4m`rel'`y', 11))
        replace racemmx`rel'`y'=12 if (inlist(racex1m`rel'`y', 12) | inlist(racex2m`rel'`y', 12) | inlist(racex3m`rel'`y', 12) | inlist(racex4m`rel'`y', 12))
        replace racemmx`rel'`y'=13 if (inlist(racex1m`rel'`y', 13) | inlist(racex2m`rel'`y', 13) | inlist(racex3m`rel'`y', 13) | inlist(racex4m`rel'`y', 13))
        replace racemmx`rel'`y'=14 if (inlist(racex1m`rel'`y', 14) | inlist(racex2m`rel'`y', 14) | inlist(racex3m`rel'`y', 14) | inlist(racex4m`rel'`y', 14))
        replace racemmx`rel'`y'=.  if ((racex1m`rel'`y'==.)        & (racex2m`rel'`y'==.)        & (racex3m`rel'`y'==.)        & (racex4m`rel'`y'==.))
        
        * Assign value labels to the newly created variable:
        if (inrange(`y', 1968, 1984) | inrange(`y', 1997, 2003)) {
            lab val racemm`rel'`y' raceethnicity_4cat1
            lab val racemmx`rel'`y' raceethnicity_8cat         
        }
        
        if (inrange(`y', 1985, 1996) | inrange(`y', 2005, 2099)) {
            lab val racemm`rel'`y' raceethnicity_4cat2
            lab val racemmx`rel'`y' raceethnicity_14cat         
        }
    }
}

* Describe the newly created variables:
summarize racemmrp* racemmxrp* racemmsp* racemmxsp*


*-------------------------------------------------------------------------*
* (17-25) race`k'm, ethospanrep, race, racex, racemm, racemmx - 
* Race/ethnicity, for each specification (multi mention; extended)
*-------------------------------------------------------------------------*

* Create list of each specification of the race/ethnicity variable:
#delimit ;
global vars_race2
    "
    race1mrep
    race2mrep
    race3mrep
    race4mrep
    ethospanrep
    race
    racex
    racemm
    racemmx
    "
;
global vars_race2_lab
    `"
    "Ind's reported race, mention 1"
    "Ind's reported race, mention 2"
    "Ind's reported race, mention 3"
    "Ind's reported race, mention 4"
    "Ind's reported ethnic origin, Spanish descent"
    "Ind's race/ethnicity, from first mention"
    "Ind's race/ethnicity, from first mention, extended"
    "Ind's race/ethnicity, from multi mention"
    "Ind's race/ethnicity, from multi mention, extended"
    "'
;
global vars_race2_val
    "
    race_9cat
    race_9cat
    race_9cat
    race_9cat
    ethospanrep_8cat
    raceethnicity_
    raceethnicity_
    raceethnicity_
    raceethnicity_
    " 
    /* 
    * Note: For the combined measures of race/ethnicity, there is variation in
    * the value label scheme (of "raceethnicity_") that will be applied, which 
    * will depend on: (1) whether it is the abridged or extended measure; and
    * (2) which survey year is being assigned, because Hispanic ethnicity is 
    * unavailable in several years and collapsed into the measure of race.
    */
;
global n_vars_race2=wordcount("${vars_race2}")
;
#delimit cr

* Assign racial/ethnic characteristics to the individual level:
foreach h of numlist 1/$n_vars_race2 {
    local var: word `h' of ${vars_race2}
    local varlab: word `h' of ${vars_race2_lab}
    local vallab: word `h' of ${vars_race2_val}
    
    foreach i of numlist 1/$n_year {
        local y: word `i' of ${year}
            
        * Generate a new variable for the PSID-SHELF data:
        capture noisily drop `var'`y'
        gen `var'`y'=-1
        lab var `var'`y' "`varlab', `y'"
        
        * Assign values for the combined measure of race/ethnicity:
        capture noisily confirm variable `var'rp`y'
            if (_rc==0) replace `var'`y'=(`var'rp`y') if inrange(relx`y', 100, 199)
            if (_rc!=0) replace `var'`y'=.            if inrange(relx`y', 100, 199)
        
        capture noisily confirm variable `var'sp`y' /* Assign value if RP or SP variable exists; otherwise assign missing */
            if (_rc==0) replace `var'`y'=(`var'sp`y') if inrange(relx`y', 200, 299)
            if (_rc!=0) replace `var'`y'=.            if inrange(relx`y', 200, 299)
        
        replace `var'`y'=. if !inrange(relx`y', 100, 299)
        
        * Assign values of zero to Hispanic ethnicity for individuals with 
        * nonmissing values of race who do not mention Spanish descent:
        if ("`var'"=="ethospanrep") {
            replace ethospanrep`y'=0 if (ethospanrep`y'==.) & (race1mrep`y'!=. | race2mrep`y'!=. | race3mrep`y'!=. | race4mrep`y'!=.)
        }
        
        * Assign value labels to the newly created variable:
        if ("`vallab'"=="raceethnicity_") {
            if ("`var'"=="racex" | "`var'"=="racemmx") {
                if (inrange(`y', 1968, 1984) | inrange(`y', 1997, 2003)) {
                    lab val `var'`y' `vallab'8cat         
                }
                
                if (inrange(`y', 1985, 1996) | inrange(`y', 2005, 2099)) {
                    lab val `var'`y' `vallab'14cat        
                }        
            }
            
            if ("`var'"=="race" | "`var'"=="racemm") {
                if (inrange(`y', 1968, 1984) | inrange(`y', 1997, 2003)) {
                    lab val `var'`y' `vallab'4cat1         
                }
                
                if (inrange(`y', 1985, 1996) | inrange(`y', 2005, 2099)) {
                    lab val `var'`y' `vallab'4cat2       
                }   
            }
        }
        else {
            lab val `var'`y' `vallab'
        }
    }
}

* Describe the newly created variables:
summarize race1mrep19* race1mrep20* race2mrep19* race2mrep20* race3mrep19* race3mrep20* race4mrep19* race4mrep20* ethospanrep19* ethospanrep20* race19* race20* racex19* racex19* racemm19* racemm20* racemmx19* racemmx19*


*-------------------------------------------------------------------------*
* (26-27) race`k'm, ethospanrep, race, racex, racemm, racemmx - 
* Race/ethnicity, for each specification (multi mention; extended)
*-------------------------------------------------------------------------*

* Create list of each specification of the race/ethnicity variable:
#delimit ;
global vars_race3
    "
    race
    racemm
    "
;
global vars_race3_lab
    `"
    "Ind's race/ethnicity, majority response, from first mention"
    "Ind's race/ethnicity, majority response, from multi mention"
    "'
;
global vars_race3_val
    "
    raceethnicity_4catsummary
    raceethnicity_4catsummary
    "
;
global vars_race3_maxval
    "
    4
    4
    "
;
global n_vars_race3=wordcount("${vars_race3}")
;
#delimit cr

* Assign the majority-reported value of race/ethnicity to each individual:
foreach h of numlist 1/$n_vars_race3 {
    local var: word `h' of ${vars_race3}
    local varlab: word `h' of ${vars_race3_lab}
    local vallab: word `h' of ${vars_race3_val}
    local maxval: word `h' of ${vars_race3_maxval}
    
    * Loop through each value of the variable:
    foreach j of numlist 1/`maxval' {
            
        * Loop through each survey year:
        foreach i of numlist 1/$n_year {
            local y: word `i' of ${year}
        
            * Identify whether an individual reported the value:
            capture noisily drop temp_`var'`y'_`j'_anyrep
            capture noisily drop temp_`var'`y'_`j'_yrrep
            gen temp_`var'`y'_`j'_anyrep=(`var'`y'==`j')
            gen temp_`var'`y'_`j'_yrrep=(`y') if (temp_`var'`y'_`j'_anyrep==1)
        }
        
        * Identify the number of times that an individual reported the value:
        capture noisily drop temp_`var'_`j'_numrep
        capture noisily drop temp_`var'_`j'_lastyr
        egen temp_`var'_`j'_numrep=rowtotal(temp_`var'*_`j'_anyrep)
        egen temp_`var'_`j'_lastyr=rowmax(temp_`var'*_`j'_yrrep)
        
        * Drop selection of temporary variables (to increase speed of file):
        drop temp_`var'*_`j'_anyrep
        drop temp_`var'*_`j'_yrrep
        
        * Track loop progress:
        di "[Loop progress report] Variable `h' of ${n_vars_race3} (`var'). Value `j' of `maxval'."
    }
    
    * Collect the highest number of times that an individual reported any value:
    capture noisily drop temp_`var'_maxrep_tot
    egen temp_`var'_maxrep_tot=rowmax(temp_`var'_*_numrep)
    
    * Loop through each value of the variable:
    foreach j of numlist 1/`maxval' {
        
        * Collect the last year that each value was reported the highest number of times:
        * (Note: Multiple values could each be reported, e.g., 3 times with 3 as the max report.)
        capture noisily drop temp_`var'_maxrep_`j'_maxyr
        gen temp_`var'_maxrep_`j'_maxyr=(temp_`var'_`j'_lastyr) if (temp_`var'_`j'_numrep==temp_`var'_maxrep_tot)
        
        * Identify each value that was reported the highest number of times:
        capture noisily drop temp_`var'_maxrep_`j'_obs
        gen temp_`var'_maxrep_`j'_obs=(temp_`var'_`j'_numrep==temp_`var'_maxrep_tot) if inrange(temp_`var'_maxrep_tot, 1, 99)
    }
    
    * Identify the most recent last year that a value was reported the highest number of times:
    capture noisily drop temp_`var'_maxrep_recent
    egen temp_`var'_maxrep_recent=rowmax(temp_`var'_maxrep_*_maxyr)

    * Count the number of values that were reported the highest number of times:
    capture noisily drop temp_`var'_maxrep_count
    egen temp_`var'_maxrep_count=rowtotal(temp_`var'_maxrep_*_obs)
    
    * Generate the variable for race/ethnicity characteristics:
    capture noisily drop `var'
    gen `var'maj=-1
    lab var `var'maj "`varlab'"

    * Loop through each value of the variable:
    foreach j of numlist 1/`maxval' {
        
        * Identify the modal value (i.e., reported the highest number of times):
        replace `var'maj=(`j') if !inlist(temp_`var'_maxrep_tot, 0) & (temp_`var'_`j'_numrep==temp_`var'_maxrep_tot) & (temp_`var'_maxrep_`j'_maxyr==temp_`var'_maxrep_recent)
        replace `var'maj=.     if inlist(temp_`var'_maxrep_tot, 0)
    }
    
    * Assign the variable its corresponding value labels:
    lab val `var'maj `vallab'
}

* Drop temporary variables:
drop temp_*

* Rename summary measure of racial/ethnic identification based on multi mention:
rename (racemmmaj) (racemajmm)

* Describe the newly created variables:
summarize racemaj racemajmm


*-------------------------------------------------------------------------*
* Prepare to save ethnoracial measures
*-------------------------------------------------------------------------*

* Identify ethnoracial measures:
#delimit ;
global var_generate_ethnoracial
       race1mreprp*
       race2mreprp*
       race3mreprp*
       race4mreprp*
       race1mrepsp*
       race2mrepsp*
       race3mrepsp*
       race4mrepsp*
       ethospanreprp*
       ethospanrepsp*
       
       racemaj
       racemajmm
       race19* race20*
       racex19* racex20*
       racerp*
       racexrp*
       racesp*
       racexsp*
       racemm19* racemm20*
       racemmx19* racemmx20*
       racemmrp*
       racemmxrp*
       racemmsp*
       racemmxsp*
       race1mrep19* race1mrep20*
       race2mrep19* race2mrep20*
       race3mrep19* race3mrep20*
       race4mrep19* race4mrep20*
       racex1mrp*
       racex2mrp*
       racex3mrp*
       racex4mrp*
       racex1msp*
       racex2msp*
       racex3msp*
       racex4msp*
       ethospanrep19* ethospanrep20*
;
global n_var_generate_ethnoracial = wordcount("${var_generate_ethnoracial}")
;
#delimit cr

* Check variable count:
di "N (sets of) vars total = ${n_var_generate_ethnoracial}"


*-------------------------------------------------------------------------*
* Drop empty variables
*-------------------------------------------------------------------------*

* Loop through each variable:
foreach var of varlist $var_generate_ethnoracial {
    
    * Drop variables with zero observations:
    quietly summarize `var'
    if (`=r(N)'==0) drop `var'
}

* Check variable count:
di "N (sets of) vars total = ${n_var_generate_ethnoracial}"


*-------------------------------------------------------------------------*
* Save the ethnoracial measures in wide format
*-------------------------------------------------------------------------*

* Keep and reorder variables:
keep id ${var_generate_ethnoracial}
order id ${var_generate_ethnoracial}

* Sort data:
sort id

* Describe data:
describe, short
codebook id

* Compress file size:
compress

* Save the ethnoracial measures in wide format:
save "${psidshelf_root}/Construction_Files/Data/Merge/datagen_shelf_03_ethnoracial_wide.dta", replace
